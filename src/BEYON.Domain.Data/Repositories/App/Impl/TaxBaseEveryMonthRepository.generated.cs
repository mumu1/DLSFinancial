//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//	   如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类进行实现。
// </auto-generated>
//
// <copyright file="UserRepository.generated.cs">
//		Copyright(c)2013 Beyon.All rights reserved.
//		CLR版本：4.5.1
//		开发组织：北京博阳世通信息技术有限公司
//		公司网站：http://www.beyondb.com.cn
//		所属工程：BEYON.Domain.Data
//		生成时间：2016-03-01 16:09
// </copyright>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Npgsql;
using BEYON.Component.Data;
using BEYON.Component.Data.EF;
using BEYON.Component.Data.EF.Interface;
using BEYON.Domain.Model.App;


namespace BEYON.Domain.Data.Repositories.App.Impl
{
	/// <summary>
    ///   仓储操作层实现——用户信息
    /// </summary>
    public partial class TaxBaseEveryMonthRepository : EFRepositoryBase<TaxBaseEveryMonth, Int32>, ITaxBaseEveryMonthRepository
    {
        public TaxBaseEveryMonthRepository(IUnitOfWork unitOfWork)
            : base()
        { }

        public Double GetTotalIncome(String period_year, String certificateID)
        {
            var record = from p in Context.TaxBaseEveryMonths.Where(w => w.CertificateID == certificateID && w.Period == period_year)
                         select p; 
                
            var lists = record.ToList();
            Double totalIncome = 0.0;
            if (lists.Count > 0) {
             //   totalIncome = lists[0].TotalIncome;
            }
            return totalIncome;  
        }

        public Double GetTotalTax(String period_year, String certificateID)
        {
            var record = from p in Context.TaxBaseEveryMonths.Where(w => w.CertificateID == certificateID && w.Period == period_year)
                         select p;
            var lists = record.ToList();
            Double totalTax = 0.0;
            if (lists.Count > 0)
            {
                totalTax = lists[0].TotalTax;
            }
            return totalTax;
        }

        public TaxBaseEveryMonth GetExistRecord(String period_year, String certificateID) {
            TaxBaseEveryMonth taxBaseEveryMonth = null;
            var record = from p in Context.TaxBaseEveryMonths.Where(w => w.CertificateID == certificateID && w.Period == period_year)
                         select p;
            var lists = record.ToList();
            if (lists.Count > 0)
            {
                taxBaseEveryMonth = lists[0];
            }
            return taxBaseEveryMonth;
        }

        public void InsertOrUpdate(TaxBaseEveryMonth record)
        {
            //1.构造插入或更新SQL
            string[] columns = new string[]{
                "CertificateID","Name","CertificateType","InitialEaring",
                "TaxFreeIncome","AmountDeducted","InitialTaxPayable","Period","EndowmentInsurance","MedicalInsurance","OccupationalAnnuity","HousingFund","UnemployedInsurance",
                "SpecialDeduction", "TotalTax" ,"TotalSalaryIncomeBeforeTax","TotalLaborIncomeBeforeTax", "TotalTemp","UpdateDate","LastMonths"
            };
            StringBuilder sql = new StringBuilder();
            sql.Append("INSERT INTO dbo.\"TaxBaseEveryMonths\" ( ");
            foreach (var column in columns)
            {
                sql.Append(String.Format("\"{0}\",", column));
            }
            sql.Remove(sql.Length - 1, 1);
            sql.Append(" ) VALUES ( ");
            //填充值
            foreach (var column in columns)
            {
                sql.Append(String.Format(":{0},", column));
            }
            sql.Remove(sql.Length - 1, 1);
            sql.Append(" )  ON CONFLICT ( \"Period\", \"CertificateID\") DO UPDATE SET ");

            foreach (var column in columns)
            {
                sql.Append(String.Format("\"{0}\"=:{1},", column, column));
            }
            sql.Remove(sql.Length - 1, 1);


            //2.添加参数变量
            List<NpgsqlParameter> parameters = new List<NpgsqlParameter>();
            foreach (var column in columns)
            {
                var value = PropertyUtil.GetPropValue(record, column);
                if (value == null)
                    value = "";
                if (value is String && !String.IsNullOrEmpty(value.ToString()))
                {
                    value = value.ToString().Trim().Replace("\n", "").Replace(" ", "").Replace("\t", "").Replace("\r", "");
                }
                parameters.Add(new NpgsqlParameter(String.Format(":{0}", column), value));
            }


            //3.执行SQL
            var connectString = System.Configuration.ConfigurationManager.ConnectionStrings["BeyonDBGuMu"];
            using (var conntion = new NpgsqlConnection(connectString.ToString()))
            {
                conntion.Open();
                using (var command = conntion.CreateCommand())
                {
                    command.CommandText = sql.ToString();
                    command.Parameters.AddRange(parameters.ToArray());
                    command.ExecuteNonQuery();
                }
            }

        }

    }
}
