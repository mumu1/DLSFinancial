//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//	   如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类进行实现。
// </auto-generated>
//
// <copyright file="UserRepository.generated.cs">
//		Copyright(c)2013 Beyon.All rights reserved.
//		CLR版本：4.5.1
//		开发组织：北京博阳世通信息技术有限公司
//		公司网站：http://www.beyondb.com.cn
//		所属工程：BEYON.Domain.Data
//		生成时间：2016-03-01 16:09
// </copyright>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Npgsql;
using BEYON.Component.Data;
using BEYON.Component.Data.EF;
using BEYON.Component.Data.EF.Interface;
using BEYON.Domain.Model.App;


namespace BEYON.Domain.Data.Repositories.App.Impl
{
	/// <summary>
    ///   仓储操作层实现——用户信息
    /// </summary>
    public partial class TaxBaseByMonthRepository : EFRepositoryBase<TaxBaseByMonth, Int32>, ITaxBaseByMonthRepository
    {
        public TaxBaseByMonthRepository(IUnitOfWork unitOfWork)
            : base()
        { }

        public Double GetBaseSalary(String certificateID)
        {
            var record = from p in Context.TaxBaseByMonths.Where(w => w.CertificateID.ToLower() == certificateID.ToLower())
                         select p;
            var lists = record.ToList();
            Double baseSalary = 0.0;
            if (lists.Count > 0) {
               // baseSalary = lists[0].InitialEaring - lists[0].TaxFree - lists[0].AmountDeducted;
               // baseSalary = lists[0].InitialEaring - lists[0].TaxFree - lists[0].AmountDeducted - lists[0].SpecialDeduction;
            }
            return baseSalary;  
        }

        public Double GetBaseTax(String certificateID)
        {
            var record = from p in Context.TaxBaseByMonths.Where(w => w.CertificateID.ToLower() == certificateID.ToLower())
                         select p;
            var lists = record.ToList();
            Double baseTax = 0.0;
            if (lists.Count > 0)
            {
                baseTax = lists[0].InitialTax;
            }
            return baseTax;
        }

        public Double GetCutTax(String certificateID)
        {
            var record = from p in Context.TaxBaseByMonths.Where(w => w.CertificateID.ToLower() == certificateID.ToLower())
                         select p;
            var lists = record.ToList();
            Double cutTax = 0.0;
            if (lists.Count > 0)
            {
                cutTax = lists[0].CutTax;
            }
            return cutTax;
        }

        public Double GetInitialTaxPayable(String certificateID)
        {
            var record = from p in Context.TaxBaseByMonths.Where(w => w.CertificateID.ToLower() == certificateID.ToLower())
                         select p;
            var lists = record.ToList();
            Double initialTaxPayable = 0.0;
            if (lists.Count > 0)
            {
                initialTaxPayable = lists[0].InitialTaxPayable;
            }
            return initialTaxPayable;
        }

        //（本期初始税前收入额TaxBaseByMonth.InitialEaring—本期免税收入TaxFreeIncome
        //—本期养老保险—本期失业保险—本期医疗保险—本期职业年金—本期住房公积金
        //—本期基本扣除—本期专项附加扣除）
        public Double GetPart1(String certificateID) {
            var record = from p in Context.TaxBaseByMonths.Where(w => w.CertificateID.ToLower() == certificateID.ToLower())
                         select p;
            var lists = record.ToList();
            Double part1 = 0.0;
            if (lists.Count > 0)
            {
                part1 = lists[0].InitialEaring - lists[0].TaxFreeIncome - lists[0].EndowmentInsurance - lists[0].UnemployedInsurance - lists[0].MedicalInsurance - lists[0].OccupationalAnnuity - lists[0].HousingFund - lists[0].AmountDeducted - lists[0].SpecialDeduction;
            }
            return part1;
        }


        public Double GetPart2(String certificateID)
        {
            var record = from p in Context.TaxBaseByMonths.Where(w => w.CertificateID.ToLower() == certificateID.ToLower())
                         select p;
            var lists = record.ToList();
            Double part2 = 0.0;
            if (lists.Count > 0)
            {
                part2 = lists[0].InitialEaring - lists[0].TaxFreeIncome - lists[0].EndowmentInsurance - lists[0].UnemployedInsurance - lists[0].MedicalInsurance - lists[0].OccupationalAnnuity - lists[0].HousingFund - lists[0].AmountDeducted - lists[0].SpecialDeduction;
            }
            return part2;
        }

        public Double GetInitialTax(String certificateID)
        {
            var record = from p in Context.TaxBaseByMonths.Where(w => w.CertificateID.ToLower() == certificateID.ToLower())
                         select p;
            var lists = record.ToList();
            Double initialTax = 0.0;
            if (lists.Count > 0)
            {
                initialTax = lists[0].InitialTax;
            }
            return initialTax;
        }

        public Double GetWithoutInsurance(String certificateID)
        {
            var record = from p in Context.TaxBaseByMonths.Where(w => w.CertificateID.ToLower() == certificateID.ToLower())
                         select p;
            var lists = record.ToList();
            Double withoutInsurance = 0.0;
            //1.（本期初始税后收入额—本期免税收入 —本期养老保险—本期失业保险
            //—本期医疗保险—本期职业年金—本期住房公积金—本期基本扣除
            //—本期专项附加扣除）
            if (lists.Count > 0)
            {
                withoutInsurance = lists[0].InitialAfterTaxIncome - lists[0].TaxFreeIncome - lists[0].EndowmentInsurance - lists[0].UnemployedInsurance - lists[0].MedicalInsurance - lists[0].OccupationalAnnuity - lists[0].HousingFund - lists[0].AmountDeducted - lists[0].SpecialDeduction;
            }
            return withoutInsurance;
        }

        public String GetNameByCerID(String certificateID) {
            String name = ",";     
            //验证完全一致
            var record = from p in Context.TaxBaseByMonths.Where(w => w.CertificateID == certificateID.Trim().Replace("\n", "").Replace(" ", "").Replace("\t", "").Replace("\r", ""))
                         select p;
            var lists = record.ToList();
            if (lists.Count > 0)
            {
                name = lists[0].Name+",same";
            }
            //验证身份证尾号X大小写完全一致
            else {
                var record2 = from p in Context.TaxBaseByMonths.Where(w => w.CertificateID.ToUpper() == certificateID.Trim().Replace("\n", "").Replace(" ", "").Replace("\t", "").Replace("\r", ""))
                             select p;
                var lists2 = record2.ToList();
                if (lists2.Count > 0)
                {
                    name = lists2[0].Name + ",lower";
                }
                else {
                    var record3 = from p in Context.TaxBaseByMonths.Where(w => w.CertificateID.ToLower() == certificateID.Trim().Replace("\n", "").Replace(" ", "").Replace("\t", "").Replace("\r", ""))
                                  select p;
                    var lists3 = record3.ToList();
                    if (lists3.Count > 0)
                    {
                        name = lists3[0].Name + ",upper";
                    }
                }
            }
            return name;
        }

        //是否所内
        public Boolean IsInDepartment(String certificateID)
        {
            Boolean flag = false;
            //验证完全一致
            var record = from p in Context.TaxBaseByMonths.Where(w => w.CertificateID.ToUpper() == certificateID.Trim().Replace("\n", "").Replace(" ", "").Replace("\t", "").Replace("\r", "").ToUpper())
                         select p;
            var lists = record.ToList();
            if (lists.Count > 0)
            {
                flag = true;
            }
           
            return flag;
        }

        public void InsertOrUpdate(TaxBaseByMonth record)
        {
            //1.构造插入或更新SQL
            string[] columns = new string[]{
                "CertificateID","Name","CertificateType","InitialEaring",
                "TaxFreeIncome","EndowmentInsurance","UnemployedInsurance","MedicalInsurance","OccupationalAnnuity","HousingFund","AmountDeducted","SpecialDeduction","CutTax","InitialTaxPayable","InitialTax","Period",
                "UpdateDate","InitialAfterTaxIncome"
            };
            StringBuilder sql = new StringBuilder();
            sql.Append("INSERT INTO dbo.\"TaxBaseByMonths\" ( ");
            foreach (var column in columns)
            {
                sql.Append(String.Format("\"{0}\",", column));
            }
            sql.Remove(sql.Length - 1, 1);
            sql.Append(" ) VALUES ( ");
            //填充值
            foreach (var column in columns)
            {
                sql.Append(String.Format(":{0},", column));
            }
            sql.Remove(sql.Length - 1, 1);
            sql.Append(" )  ON CONFLICT (\"CertificateID\", \"CertificateType\") DO UPDATE SET ");

            foreach (var column in columns)
            {
                sql.Append(String.Format("\"{0}\"=:{1},", column, column));
            }
            sql.Remove(sql.Length - 1, 1);

            //2.添加参数变量
            List<NpgsqlParameter> parameters = new List<NpgsqlParameter>();
            foreach (var column in columns)
            {
                var value = PropertyUtil.GetPropValue(record, column);
                if (value == null)
                    value = "";
                parameters.Add(new NpgsqlParameter(String.Format(":{0}", column), value));
            }

            //3.执行SQL
            var connectString = System.Configuration.ConfigurationManager.ConnectionStrings["BeyonDBGuMu"];
            using (var conntion = new NpgsqlConnection(connectString.ToString()))
            {
                conntion.Open();
                using (var command = conntion.CreateCommand())
                {
                    command.CommandText = sql.ToString();
                    command.Parameters.AddRange(parameters.ToArray());
                    command.ExecuteNonQuery();
                }
            }
        }

    }
}
